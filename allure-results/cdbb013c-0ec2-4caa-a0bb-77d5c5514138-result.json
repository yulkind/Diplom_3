{"name": "test_order_in_progress_correct_number[Chrome]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"Modal_modal__close_modified__3V5XS Modal_modal__close__TnseK\">...</button> is not clickable at point (818, 2). Other element would receive the click: <div class=\"Modal_modal_overlay__x2ZCr\"></div>\n  (Session info: chrome=127.0.6533.120)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7DF8C9642+30946]\n\t(No symbol) [0x00007FF7DF87E3D9]\n\t(No symbol) [0x00007FF7DF776FDA]\n\t(No symbol) [0x00007FF7DF7CFEEE]\n\t(No symbol) [0x00007FF7DF7CD962]\n\t(No symbol) [0x00007FF7DF7CAE7B]\n\t(No symbol) [0x00007FF7DF7CA095]\n\t(No symbol) [0x00007FF7DF7BC271]\n\t(No symbol) [0x00007FF7DF7ECA6A]\n\t(No symbol) [0x00007FF7DF7BBBB6]\n\t(No symbol) [0x00007FF7DF7ECC80]\n\t(No symbol) [0x00007FF7DF80B041]\n\t(No symbol) [0x00007FF7DF7EC813]\n\t(No symbol) [0x00007FF7DF7BA6E5]\n\t(No symbol) [0x00007FF7DF7BB021]\n\tGetHandleVerifier [0x00007FF7DF9FF84D+1301229]\n\tGetHandleVerifier [0x00007FF7DFA0BDC7+1351783]\n\tGetHandleVerifier [0x00007FF7DFA02A13+1313971]\n\tGetHandleVerifier [0x00007FF7DF8FDD16+245686]\n\t(No symbol) [0x00007FF7DF88759F]\n\t(No symbol) [0x00007FF7DF883814]\n\t(No symbol) [0x00007FF7DF8839A2]\n\t(No symbol) [0x00007FF7DF87A3FF]\n\tBaseThreadInitThunk [0x00007FFC0BF8257D+29]\n\tRtlUserThreadStart [0x00007FFC0D8AAF28+40]", "trace": "self = <tests.test_order_feed.TestOrderFeed object at 0x000002DF30CC23C0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ec70ab2985bed550a5ebc8b035d28bdf\")>\n\n    @allure.description(\"Появление номера заказа после его оформления в разделе «В работе»\")\n    def test_order_in_progress_correct_number(self, driver):\n        main_page = MainPage(driver, Urls.base_url)\n        login_page = LoginPage(driver, Urls.base_url)\n        basic_functionality = BasicFunctionality(driver, Urls.base_url)\n        order_feed = OrderFeedPage(driver, Urls.base_url)\n    \n        main_page.open_base_url()\n        main_page.click_on_profile_button()\n        login_page.set_login_data()\n        login_page.login()\n        order_feed.wait_for_element_to_be_visible(MainPageLocators.PLACE_ORDER_BUTTON)\n        basic_functionality.add_ingredient_to_order()\n        basic_functionality.place_order()\n        order_feed.wait_for_element_to_be_visible(MainPageLocators.ORDER_ID_TITLE)\n    \n        order_id = order_feed.get_last_order_number_from_main_page()\n>       order_feed.close_order_popup_window()\n\ntests\\test_order_feed.py:123: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage_objects\\order_feed_page.py:24: in close_order_popup_window\n    self.click_on_element(*MainPageLocators.POPUP_WINDOW_CLOSE_BUTTON)\npage_objects\\base_page.py:15: in click_on_element\n    self.find_element(*locator).click()\nC:\\Users\\Yulia1\\PycharmProjects\\5\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\Users\\Yulia1\\PycharmProjects\\5\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nC:\\Users\\Yulia1\\PycharmProjects\\5\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002DF30D6AEA0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF7DF87A3FF]\\\\n\\\\tBaseThreadInitThunk [0x00007FFC0BF8257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFC0D8AAF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"Modal_modal__close_modified__3V5XS Modal_modal__close__TnseK\">...</button> is not clickable at point (818, 2). Other element would receive the click: <div class=\"Modal_modal_overlay__x2ZCr\"></div>\nE         (Session info: chrome=127.0.6533.120)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7DF8C9642+30946]\nE       \t(No symbol) [0x00007FF7DF87E3D9]\nE       \t(No symbol) [0x00007FF7DF776FDA]\nE       \t(No symbol) [0x00007FF7DF7CFEEE]\nE       \t(No symbol) [0x00007FF7DF7CD962]\nE       \t(No symbol) [0x00007FF7DF7CAE7B]\nE       \t(No symbol) [0x00007FF7DF7CA095]\nE       \t(No symbol) [0x00007FF7DF7BC271]\nE       \t(No symbol) [0x00007FF7DF7ECA6A]\nE       \t(No symbol) [0x00007FF7DF7BBBB6]\nE       \t(No symbol) [0x00007FF7DF7ECC80]\nE       \t(No symbol) [0x00007FF7DF80B041]\nE       \t(No symbol) [0x00007FF7DF7EC813]\nE       \t(No symbol) [0x00007FF7DF7BA6E5]\nE       \t(No symbol) [0x00007FF7DF7BB021]\nE       \tGetHandleVerifier [0x00007FF7DF9FF84D+1301229]\nE       \tGetHandleVerifier [0x00007FF7DFA0BDC7+1351783]\nE       \tGetHandleVerifier [0x00007FF7DFA02A13+1313971]\nE       \tGetHandleVerifier [0x00007FF7DF8FDD16+245686]\nE       \t(No symbol) [0x00007FF7DF88759F]\nE       \t(No symbol) [0x00007FF7DF883814]\nE       \t(No symbol) [0x00007FF7DF8839A2]\nE       \t(No symbol) [0x00007FF7DF87A3FF]\nE       \tBaseThreadInitThunk [0x00007FFC0BF8257D+29]\nE       \tRtlUserThreadStart [0x00007FFC0D8AAF28+40]\n\nC:\\Users\\Yulia1\\PycharmProjects\\5\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "description": "Появление номера заказа после его оформления в разделе «В работе»", "parameters": [{"name": "driver", "value": "'Chrome'"}], "start": 1724644961790, "stop": 1724644966665, "uuid": "7657bd0c-e32a-4eca-94e9-202682209496", "historyId": "264755ca1fed38dccc13471bff75dee0", "testCaseId": "dd5f95929c76544ceddbcacffb48e8b6", "fullName": "tests.test_order_feed.TestOrderFeed#test_order_in_progress_correct_number", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_order_feed"}, {"name": "subSuite", "value": "TestOrderFeed"}, {"name": "host", "value": "DESKTOP-0A2OPDH"}, {"name": "thread", "value": "17664-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_order_feed"}]}